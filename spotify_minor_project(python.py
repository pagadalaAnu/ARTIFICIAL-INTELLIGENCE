# -*- coding: utf-8 -*-
"""SPOTIFY MINOR PROJECT

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rwmZVV_BHhtS7IaaBt2O7R2F-Fw1uWyr
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

spotify_data = pd.read_csv('/content/spotify dataset.csv')

# Drop non-numeric columns and columns that are not suitable for modeling
X = spotify_data.drop(columns=['track_id', 'track_name'])
y = spotify_data['track_popularity']

# Encode categorical variables if there are any
label_encoder = LabelEncoder()
for col in X.columns:
    if X[col].dtype == 'object':
        X[col] = label_encoder.fit_transform(X[col])

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Remove non-numeric columns before calculating correlation matrix
numeric_data = spotify_data.select_dtypes(include=['float64', 'int64'])

# Show correlation matrix of features according to the dataset
correlation_matrix = numeric_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Build your model (example using Logistic Regression)
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Plot clusters
sns.scatterplot(data=spotify_data, x='energy', y='loudness', hue='Cluster')
plt.title('Clusters of Spotify Data')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Draw plots to provide essential information and derive insights
# Example:
# Plot distribution of a feature
sns.histplot(spotify_data['duration_ms'], bins=20, kde=True)
plt.xlabel('duration_ms')
plt.ylabel('Count')
plt.title('Distribution of Feature')
plt.show()

# Additional plots for analysis and insights

# Perform KMeans clustering
kmeans = KMeans(n_clusters=3)
cluster_labels = kmeans.fit_predict(spotify_data[['energy', 'loudness']])
spotify_data['Cluster'] = cluster_labels

from sklearn.cluster import KMeans

# Find and plot different clusters according to different parameters
# Example:
kmeans = KMeans(n_clusters=3)
cluster_labels = kmeans.fit_predict(spotify_data[['energy', 'loudness']])
spotify_data['Cluster'] = cluster_labels

# Plot clusters
sns.scatterplot(data=spotify_data, x='energy', y='loudness', hue='Cluster')
plt.title('Clusters of Spotify Data')
plt.show()

# Additional clustering based on different parameters

# Evaluate model
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)